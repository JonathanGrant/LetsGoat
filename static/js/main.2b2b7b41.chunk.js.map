{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","TenorGifs","newProps","_this","this","setTimeout","url","meme","fetch","then","results","json","data","console","log","imgUrl","media","gif","setState","loading","state","react_default","a","createElement","src","className","Component","GifShow","_this2","images","original","InputBox","props","_this3","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","text","type","name","onChange","func","App","_this4","e","target","value","style","display","App_GifShow","App_TenorGifs","App_InputBox","onEdit","bind","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,uKCOlCC,iNACsBC,GAAU,IAAAC,EAAAC,KAClCC,WAAW,WACT,IAAIC,EALI,mEAKUJ,EAASK,KAC3BC,MAAMF,GACLG,KAAK,SAAAC,GACJ,OAAOA,EAAQC,SACdF,KAAK,SAAAG,GACNC,QAAQC,IAAIF,GACZ,IAAIG,EAASH,EAAKF,QAAQ,GAAGM,MAAM,GAAGC,IAAIX,IAC1CH,EAAKe,SAAS,CAACZ,IAAKS,EAAQI,SAAS,EAAOP,KAAMA,OAEnD,KACHR,KAAKc,SAAS,CAACC,SAAS,qCAKxB,OADAN,QAAQC,IAAIV,MACRA,KAAKgB,QAAUhB,KAAKgB,MAAMD,QAE1BE,EAAAC,EAAAC,cAAA,OAAKC,IAAKpB,KAAKgB,MAAMd,IAAKmB,UAAU,gCAG9B,YAvBUC,cA8BlBC,oMAEsBzB,GAAU,IAAA0B,EAAAxB,KAClCC,WAAW,WACT,IAAIC,EArCI,gGAqCUJ,EAASK,KAC3BC,MAAMF,GACLG,KAAK,SAAAC,GACJ,OAAOA,EAAQC,SACdF,KAAK,SAAAG,GACNC,QAAQC,IAAIF,GACZ,IAAIG,EAASH,EAAKA,KAAK,GAAGiB,OAAOC,SAASxB,IAC1CsB,EAAKV,SAAS,CAACZ,IAAKS,EAAQI,SAAS,EAAOP,KAAMA,OAEnD,KACHR,KAAKc,SAAS,CAACC,SAAS,qCAKxB,OADAN,QAAQC,IAAIV,MACRA,KAAKgB,QAAUhB,KAAKgB,MAAMD,QAE1BE,EAAAC,EAAAC,cAAA,OAAKC,IAAKpB,KAAKgB,MAAMd,IAAKmB,UAAU,gCAG9B,YAxBQC,aA8BhBK,cAEJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAA9B,KAAA2B,IACjBE,EAAAC,OAAAE,EAAA,EAAAF,CAAA9B,KAAA8B,OAAAG,EAAA,EAAAH,CAAAH,GAAAO,KAAAlC,KAAM4B,KACDZ,MAAQ,CAACmB,KAAM,QAFHN,wEAMjB,OACEZ,EAAAC,EAAAC,cAAA,SAAOiB,KAAK,OAAOC,KAAK,OAAOC,SAAUtC,KAAK4B,MAAMW,cATnCjB,aAwCRkB,cAzBb,SAAAA,EAAYZ,GAAO,IAAAa,EAAA,OAAAX,OAAAC,EAAA,EAAAD,CAAA9B,KAAAwC,IACjBC,EAAAX,OAAAE,EAAA,EAAAF,CAAA9B,KAAA8B,OAAAG,EAAA,EAAAH,CAAAU,GAAAN,KAAAlC,KAAM4B,KACDZ,MAAQ,CAACb,KAAM,QAFHsC,sEAKZC,GACLjC,QAAQC,IAAIgC,EAAEC,OAAOC,OACrB5C,KAAKc,SAAS,CAACX,KAAMuC,EAAEC,OAAOC,yCAI9B,OACE3B,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAAA,UAAQE,UAAU,cAClBJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,MAAMwB,MAAO,CAACC,QAAS,cACpC7B,EAAAC,EAAAC,cAAC4B,EAAD,CAAS5C,KAAMH,KAAKgB,MAAMb,OAC1Bc,EAAAC,EAAAC,cAAC6B,EAAD,CAAW7C,KAAMH,KAAKgB,MAAMb,QAE9Bc,EAAAC,EAAAC,cAAC8B,EAAD,CAAUV,KAAMvC,KAAKkD,OAAOC,KAAKnD,iBAnBvBsB,aCrEE8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzC,EAAAC,EAAAC,cAACwC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3D,KAAK,SAAA4D,GACjCA,EAAaC","file":"static/js/main.2b2b7b41.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nconst giphy = 'https://api.giphy.com/v1/gifs/search?api_key=K9654qRl1lOrwllarrPZp3AfCOCuXZsH&limit=1&q=meme ';\nconst tenor = 'https://api.tenor.com/v1/search?key=9T5XLH0PXOSB&limit=1&q=meme ';\n\nclass TenorGifs extends Component {\n  componentWillReceiveProps(newProps) {\n    setTimeout(() => {\n      var url = tenor + newProps.meme\n      fetch(url)\n      .then(results => {\n        return results.json()\n      }).then(data => {\n        console.log(data)\n        let imgUrl = data.results[0].media[0].gif.url\n        this.setState({url: imgUrl, loading: false, data: data})\n      })\n    }, 500)\n    this.setState({loading: true})\n  }\n\n  render() {\n    console.log(this)\n    if (this.state && !this.state.loading) {\n      return (\n        <img src={this.state.url} className=\"col-lg-6 col-md-6 col-sm-12\" />\n      )\n    } else {\n      return (null\n      )\n    }\n  }\n}\n\n\nclass GifShow extends Component {\n\n  componentWillReceiveProps(newProps) {\n    setTimeout(() => {\n      var url = giphy + newProps.meme\n      fetch(url)\n      .then(results => {\n        return results.json()\n      }).then(data => {\n        console.log(data)\n        let imgUrl = data.data[0].images.original.url\n        this.setState({url: imgUrl, loading: false, data: data})\n      })\n    }, 500)\n    this.setState({loading: true})\n  }\n\n  render() {\n    console.log(this)\n    if (this.state && !this.state.loading) {\n      return (\n        <img src={this.state.url} className=\"col-lg-6 col-md-6 col-sm-12\" />\n      )\n    } else {\n      return (null\n      )\n    }\n  }\n}\n\nclass InputBox extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {text: 'goat'}\n  }\n\n  render() {\n    return (\n      <input type=\"text\" name=\"meme\" onChange={this.props.func}/>\n    )\n  }\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {meme: 'goat'}\n  }\n\n  onEdit(e) {\n    console.log(e.target.value)\n    this.setState({meme: e.target.value})\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n        <div className=\"row\" style={{display: 'flow-root'}}>\n          <GifShow meme={this.state.meme} />\n          <TenorGifs meme={this.state.meme} />\n        </div>\n        <InputBox func={this.onEdit.bind(this)} />\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}